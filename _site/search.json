[
  {
    "objectID": "research.html",
    "href": "research.html",
    "title": "E-Research",
    "section": "",
    "text": "Web-based Clustering Application for Determining and Understanding Student Engagement Levels in Virtual Learning Environments\nKeywords: Virtual Learning Environments, Student Engagement, Clustering.\nPublication Date: 30 November 2023\nRead Article\n\n\n\n\nIdentifying At-Risk Students for Early Intervention—A Probabilistic Machine Learning Approach\nKeywords: Machine Learning, Probabilistic Machine Learning, Predictive Analytics, At-risk Students, Early Intervention\nPublication Date: 18 March 2023\nRead Article\n\n\n\n\nShowcasing White-Box Implementation of the RSA Digital Signature Scheme\nKeywords: Digital Signature Scheme, Private Key, Public Key\nPublication Date: 18 October 2022\nRead Article"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Posts",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nUsing Highcharter in an Interactive and Static Quarto Report\n\n\n\n\n\n\n\ndata visualisation\n\n\ndata analysis\n\n\nr\n\n\nquarto\n\n\ncode\n\n\n\n\nDisplaying interactive and static charts in different quarto report formats: .html, .pdf, and docx (word document)\n\n\n\n\n\n\nFeb 17, 2024\n\n\nEli Nimy\n\n\n5 min\n\n\n\n\n\n\n  \n\n\n\n\nInteractive Data Visualisation with Highcharter in R\n\n\n\n\n\n\n\ndata visualisation\n\n\ndata analysis\n\n\nr\n\n\ncode\n\n\n\n\nlearn how to create common interactive and customizable data visualizations using Highcharts\n\n\n\n\n\n\nFeb 16, 2024\n\n\nEli Nimy\n\n\n16 min\n\n\n\n\n\n\n  \n\n\n\n\nColor Palette Generation and Previewing for Charts and Dashboards\n\n\n\n\n\n\n\ndata visualisation\n\n\ndashboard\n\n\n\n\nExplore methods for choosing colors and color palettes for data visualization. Uncover tools to visualize how these selections will appear in charts and dashboards without the need to create them firsthand.\n\n\n\n\n\n\nFeb 12, 2024\n\n\nEli Nimy\n\n\n3 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Friendly neighborhood Data Scientist documenting and sharing his learning journey.\n\nBlog Topics\n\nData Science\nData Visualisation\nData Engineering\nCloud Computing\nWeb Applications\nData Applications"
  },
  {
    "objectID": "posts/color-palettes-generation-for-data-visualisation/index.html",
    "href": "posts/color-palettes-generation-for-data-visualisation/index.html",
    "title": "Color Palette Generation and Previewing for Charts and Dashboards",
    "section": "",
    "text": "Note\n\n\n\nI recommend reading this post in dark mode if the example images are too intense for your eyes in light mode. To switch modes, click the toggle button in the top right corner, located to the left of the search icon.\n\n\n\nDefinitions\n\nColor Palette: A predefined set of colors used to represent different data categories or values in charts, graphs, or other visualizations.\nHex color: A color expressed as a six-digit combination of numbers and letters defined by its mix of red, green and blue (RGB).\n\nThe reminder of this post goes through the resources I use for color palette generation and viewing for charts and dashboards.\n\n\nGoogle Color Picker\nWhen selecting colors for data visualization, websites, or dashboard themes, I often rely on the Google Color Picker tool. It’s an excellent resource that allows you to choose colors tailored to your specific use-case. Since the colors are a mix of RGB (Red, Green, Blue), there are a staggering 16,777,216 possible combinations available. This is because each RGB parameter can have a value between 0 and 255, resulting in a total of 256 x 256 x 256 possible colors.\nTo access the Google Color Picker, simply open Chrome and search for “color picker”.\n\n\n\nData Color Picker\nData color picker is a versatile tool designed to assist in generating color palettes, single hue scales, and divergent color scales. Additionally, it provides visual previews of these color schemes in context, along with guidance on their application for data visualization.\nThe images below show the different color generation options and how they look in context.\n\n\n\n\n\n\nPalette Generator\n\n\n\n\n\n\n\nPalette Generator in Context\n\n\n\n\n\n\n\n\n\nSingle Hue Scale\n\n\n\n\n\n\n\nSingle Hue scale in Context\n\n\n\n\n\n\n\n\n\nDivergent Color Scale\n\n\n\n\n\n\n\nDivergent Color Scale in Context\n\n\n\n\n\n\n\n\nCoolors\nCoolors is a color palette generator and platform where you can explore popular and trending color schemes. It provides inspiration for creating your own palettes through a range of customization options. With Coolors, you can easily discover, experiment, and craft unique color combinations to suit your design needs.\n\n\n\n\nDashboard Color Checker\nThe dashboard color checker serves as a great tool for previewing how a dashboard will look with different color palettes. It provides the option to copy the URL of the color palettes generated in Coolors.\n\n\n\nLink to All Resources\n\nGoogle Color Picker\nData Color Picker\nCoolors\nDashboard Color Checker\n\n\n\n\n\n\n\nThank you for following along\n\n\n\nYour friendly neighborhood data scientist"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/interactive-data-visualisation-with-highcharter-in-r/index.html",
    "href": "posts/interactive-data-visualisation-with-highcharter-in-r/index.html",
    "title": "Interactive Data Visualisation with Highcharter in R",
    "section": "",
    "text": "Data visualization is a powerful tool that enables us to communicate complex information effectively and intuitively. In today’s data-driven world, where vast amounts of information are generated daily, the ability to create meaningful visual representations of data is essential for analysis, exploration, and decision-making. Among the plethora of tools available for data visualization, Highcharter stands out as a versatile and user-friendly option for creating interactive visualizations within the R programming environment.\nIn this blog post, we’ll explore how Highcharter can be leveraged to create interactive and engaging visualizations in R.\n\nInstall and load Packages\nBefore moving any further with this post, you will need to install and load three libraries: tidyverse, highcharter, and xts.\n\nTidyverse - is a collection of R packages designed for data science and statistical analysis. It provides a coherent and consistent framework for working with data by promoting a tidy data structure and emphasizing a grammar of data manipulation. The tidyverse includes packages such as dplyr for data manipulation, ggplot2 for data visualization, tidyr for data tidying, readr for data import, and several others.\nHighcharter - The highcharter package provides an interface to the Highcharts JavaScript library, allowing R users to create a wide variety of charts, including line charts, bar charts, scatter plots, heatmaps, and more, with interactive features such as zooming, tooltips, and drill-down capabilities.\nXts - eXtensible Time Series is an R package designed for handling time series data. It provides an extensible framework for creating, manipulating, and analyzing time series objects in R.\n\nInstall CRAN version:\ninstall.packages(\"tidyverse\")\ninstall.packages(\"highcharter\")\ninstall.packages(\"xts\")\nLoad packages:\n\nlibrary(tidyverse) \nlibrary(highcharter)\nlibrary(xts)\n\n\n\nDatasets\nThe R package datasets will be used to create bar, pie, scatter, and line charts using highcharter.\n\nmpgglobaltempvaccines\n\n\nmpg is a ggplot2 dataset that contains a subset of the fuel economy data that the EPA makes available on https://fueleconomy.gov/. It contains only models which had a new release every year between 1999 and 2008 - this was used as a proxy for the popularity of the car.\n\n\n\n\n\n\nExpand To Learn More About the mpg Dataset\n\n\n\n\n\nFormat - A data frame with 234 rows and 11 variables:\n\nmanufacturer - manufacturer name\nmodel - model name\ndispl - engine displacement, in litres\nyear - year of manufacture\ncyl - number of cylinders\ntrans - type of transmission\ndrv - the type of drive train, where f = front-wheel drive, r = rear wheel drive, 4 = 4wd\ncty - city miles per gallon\nhwy - highway miles per gallon\nfl - fuel type\nclass - “type” of car\n\nView mpg dataset\n\nmpg\n\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# ℹ 224 more rows\n\n\n\n\n\n\n\nglobaltemp is a highcharter dataset that contains temperature information by years, sourced by the climate lab book.\n\n\n\n\n\n\nExpand To Learn More About the globaltemp Dataset\n\n\n\n\n\nFormat - A data frame with 1992 observations and 4 variables.\n\ndate- date\nlower - minimum temperature\nmedian - median temperature\nupper - maximum temperature\n\nView globaltemp dataset\n\nglobaltemp\n\n# A tibble: 1,992 × 4\n   date       median  lower  upper\n   &lt;date&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 1850-01-01 -0.702 -1.10  -0.299\n 2 1850-02-01 -0.284 -0.675  0.114\n 3 1850-03-01 -0.732 -1.08  -0.383\n 4 1850-04-01 -0.57  -0.903 -0.237\n 5 1850-05-01 -0.325 -0.662  0.006\n 6 1850-06-01 -0.213 -0.515  0.084\n 7 1850-07-01 -0.128 -0.458  0.199\n 8 1850-08-01 -0.233 -0.596  0.132\n 9 1850-09-01 -0.444 -0.818 -0.071\n10 1850-10-01 -0.452 -0.794 -0.105\n# ℹ 1,982 more rows\n\n\n\n\n\n\n\nvaccines is a highcharter dataset that contains the number of infected people by Measles, measured over 70-some years and across all 50 states. From the WSJ analysis: http://graphics.wsj.com/infectious-diseases-and-vaccines/\n\n\n\n\n\n\nExpand To Learn More About the vaccines Dataset\n\n\n\n\n\nFormat - A data frame with 3,876 observations and 3 variables.\n\nyear- year\nstate - name of the state\ncount - number of cases per 100,000 people. If the value is NA the count was 0\n\nView vaccines dataset\n\nvaccines\n\n# A tibble: 3,876 × 3\n    year state                count\n   &lt;int&gt; &lt;chr&gt;                &lt;dbl&gt;\n 1  1928 Alabama              335. \n 2  1928 Alaska                NA  \n 3  1928 Arizona              201. \n 4  1928 Arkansas             482. \n 5  1928 California            69.2\n 6  1928 Colorado             207. \n 7  1928 Connecticut          635. \n 8  1928 Delaware             256. \n 9  1928 District Of Columbia 536. \n10  1928 Florida              120. \n# ℹ 3,866 more rows\n\n\n\n\n\n\n\n\n\n\nHighcharter Functions\n\n\n\n\n\n\nExpand To Learn More About the Highcharter Functions used in this Post\n\n\n\n\n\nhchart():\n\nThis function is used to create a highchart object directly from a data frame or other R objects.\nIt simplifies the process of creating charts by automatically inferring the chart type and mapping data variables to visual properties.\n\nhcaes():\n\nThis function specifies the aesthetics mappings for the chart.\nIt maps data variables to visual properties of the chart, such as x-axis, y-axis, color, size, etc.\n\nhc_xAxis() and hc_yAxis():\n\nThese functions configure the x-axis and y-axis of the chart, respectively.\nThey allow customization of axis titles, labels, tick marks, and other properties.\n\nhc_title():\n\nThis function sets the title of the chart.\nIt allows customization of the main title displayed above the chart.\n\nhc_exporting():\n\nhis function enables exporting functionality for the chart.\nIt allows users to download the chart as a png, jpeg, pdf, svg, vector, csv, and xls etc.\n\nhc_add_theme():\n\nThis function applies a theme to the chart.\nIt allows customization of chart appearance, such as colors, fonts, and backgrounds.\n\nhc_legend():\n\nThis function configures the appearance and position of the chart legend.\nIt allows customization of legend title, labels, alignment, and other properties.\n\nhc_colors():\n\nThis function sets a custom color palette for the chart.\nIt allows specifying a vector of colors to be used for different data series, points, or other visual elements.\n\n\n\n\n\n\nHighcharter Parameters\n\n\n\n\n\n\nExpand To Learn More About the Highcharter Parameters used in this Post\n\n\n\n\n\ntype:\n\nThis parameter specifies the type of chart to be created, such as “line”, “bar”, “scatter”, etc.\n\ncolor:\n\nThis parameter sets the color of data series, points, or other visual elements in the chart.\n\ndataLabels:\n\nThis parameter controls the display of data labels on the chart.\nIt allows customization of the format, position, and appearance of data labels.\n\nname:\n\nThis parameter sets the name or label of a data series in the chart legend.\n\nenabled:\n\nThis parameter specifies whether a particular feature, such as data labels or exporting functionality, is enabled or disabled.\n\nformat:\n\nThis parameter specifies the format of data labels or other text elements in the chart.\n\nshowInLegend:\n\nThis parameter specifies whether a data series or point should be displayed in the chart legend.\nIt can be set to TRUE or FALSE to control visibility in the legend.\n\nbackgroundColor:\n\nThis parameter sets the background color of the chart or specific chart elements.\nIt accepts color values in various formats, such as hexadecimal codes or named colors.\n\ntext:\n\nThis parameter sets the text content for various chart elements, such as titles, labels, or tooltips.\nIt allows customization of text appearance, formatting, and positioning.\n\ngroup:\n\nThis parameter is used in conjunction with hcaes() to group data points for various purposes, such as creating facets or subsets within the chart.\nIt allows grouping data points based on a categorical variable, which can be useful for creating multiple series, facets, or subsets within the chart.\n\n\n\n\n\n\nBar Charts\nBar charts are used to compare categorical data or to track changes over time.\n\nBar ChartColumn ChartGrouped Column ChartStacked Column Chart\n\n\n\nmpg |&gt;  \n  group_by(class) |&gt;  \n  summarise(number_of_cars = n()) |&gt; \n  arrange(desc(number_of_cars)) |&gt;  \n  hchart(\"bar\", hcaes(x = class, y = number_of_cars),\n         color = \"#5c6f7e\",\n         dataLabels = list(enabled = TRUE, format = \"{y}\"),\n         name = \"Number of cars\") |&gt; \n  hc_xAxis(title = list(text = \"Car type\")) |&gt;  \n  hc_yAxis(title = list(text = \"Number of cars\"),\n           labels = list(format = \"{value}\")) |&gt; \n  hc_title(text = list(\"Distribution of Car Types\")) |&gt;  \n  hc_exporting(enabled = TRUE) |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\nmpg |&gt;  \n  group_by(class) |&gt; \n  summarise(number_of_cars = n()) |&gt; \n  arrange(desc(number_of_cars)) |&gt; \n  hchart(\"column\", hcaes(x = class, y = number_of_cars),\n         color = \"#5c6f7e\",\n         dataLabels = list(enabled = TRUE, format = \"{y}\"),\n         name = \"Number of cars\") |&gt; \n  hc_xAxis(title = list(text = \"Car type\")) |&gt;  \n  hc_yAxis(title = list(text = \"Number of cars\"),\n           labels = list(format = \"{value}\")) |&gt;  \n  hc_title(text = list(\"Distribution of Car Types\")) |&gt;  \n  hc_exporting(enabled = TRUE) |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\nmpg |&gt;  \n  group_by(class, drv)  |&gt;  \n  summarise(number_of_cars = n())  |&gt;  \n  arrange(desc(number_of_cars))  |&gt;  \n  hchart(\"column\", hcaes(x = class, y = number_of_cars, group= drv),\n         dataLabels = list(enabled = TRUE, format = \"{y}\"))  |&gt;  \n  hc_xAxis(title = list(text = \"Car type\"))  |&gt;  \n  hc_yAxis(title = list(text = \"Number of Cars\"),\n           labels = list(format = \"{value}\"))  |&gt;  \n  hc_title(text = list(\"Distribution of Car Types by Drive Train\"))  |&gt;  \n  hc_legend(title = list(text = \"Type of Drive Train\")) |&gt;\n  hc_exporting(enabled = TRUE)  |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\nmpg  |&gt;  \n  group_by(class, drv)  |&gt;  \n  summarise(number_of_cars = n()) |&gt;  \n  arrange(desc(number_of_cars))  |&gt;  \n  hchart(\"column\", hcaes(x = class, y = number_of_cars, group= drv),\n         dataLabels = list(enabled = TRUE, format = \"{y}\"),\n         stacking = \"normal\")  |&gt;  \n  hc_xAxis(title = list(text = \"Type of car\"))  |&gt;  \n  hc_yAxis(title = list(text = \"Number of cars\"),\n           labels = list(format = \"{value}\"))  |&gt;  \n  hc_title(text = list(\"Distribution of Car Types by Drive Train\"))  |&gt; \n  hc_legend(title = list(text = \"Type of Drive Train\")) |&gt;\n  hc_exporting(enabled = TRUE)  |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\n\n\nPie Charts\nPie charts are effective for showing the composition or distribution of categorical data, such as market shares or proportions of a whole.\n\nPie ChartPie Chart With % labelColumn Chart AlternativeColumn Chart Alternative with Different Colors\n\n\n\nmpg |&gt;  \n  group_by(drv)  |&gt;  \n  summarise(number_of_cars = n())  |&gt;  \n  arrange(desc(number_of_cars)) |&gt;  \n  hchart(\"pie\", hcaes(x = drv, y = number_of_cars),\n         dataLabels = list(format = \"&lt;b&gt;{point.name}&lt;/b&gt;:&lt;br&gt;{point.number_of_cars}\"),\n         name = \"Number of cars\",\n         showInLegend = TRUE)  |&gt;  \n  hc_colors(c(\"#dc3545\", \"#5c6f7e\", \"orange\", \"#005383\", \"#0087bb\"))  |&gt;  \n  hc_title(text = list(\"Drive Train Distribution\"))  |&gt;\n  hc_legend(title = list(text = \"Type of Drive Train\")) |&gt;\n  hc_exporting(enabled = FALSE)  |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\nmpg  |&gt;  \n  group_by(drv) |&gt;  \n  summarise(number_of_cars = n())  |&gt;  \n  mutate(percentage_of_cars = round(number_of_cars/sum(number_of_cars)*100,1))  |&gt; \n  arrange(desc(percentage_of_cars)) |&gt;  \n  hchart(\"pie\", hcaes(x = drv, y = percentage_of_cars),\n         dataLabels = list(format = \"&lt;b&gt;{point.name}&lt;/b&gt;:&lt;br&gt;\n                           {point.percentage_of_cars:.1f}%\"),\n         name = \"Percentage of cars\",\n         showInLegend = TRUE)  |&gt;  \n  hc_colors(c(\"#dc3545\", \"#5c6f7e\", \"orange\", \"#005383\", \"#0087bb\")) %&gt;% \n  hc_title(text = list(\"Drive Train Distribution\"))  |&gt; \n  hc_legend(title = list(text = \"Type of Drive Train\")) |&gt;\n  hc_exporting(enabled = FALSE)  |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\nmpg  |&gt;  \n  group_by(drv) |&gt;  \n  summarise(number_of_cars = n())  |&gt;  \n  mutate(percentage_of_cars = round(number_of_cars/sum(number_of_cars)*100,1))  |&gt; \n  arrange(desc(percentage_of_cars)) |&gt;   \n  hchart(\"column\", hcaes(x = drv, y = percentage_of_cars),\n         color = \"#5c6f7e\",\n         dataLabels = list(enabled = TRUE, format = \"{y}%\"),\n         name = \"Percentage of cars\")  |&gt;  \n  hc_xAxis(title = list(text = \"Type of drive train\"))  |&gt;  \n  hc_yAxis(title = list(text = \"Percentage of cars\"),\n           labels = list(format = \"{value}%\"))  |&gt;  \n  hc_title(text = list(\"Drive Train Distribution\"))  |&gt;  \n  hc_exporting(enabled = TRUE)  |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\nmpg  |&gt;  \n  group_by(drv) |&gt;  \n  summarise(number_of_cars = n())  |&gt;  \n  mutate(percentage_of_cars = round(number_of_cars/sum(number_of_cars)*100,1))  |&gt; \n  arrange(desc(percentage_of_cars)) |&gt;   \n  hchart(\"column\", hcaes(x = drv, y = percentage_of_cars, \n                         color = c(\"#dc3545\", \"#5c6f7e\", \"#005383\")),\n         dataLabels = list(enabled = TRUE, format = \"{y}%\"),\n         name = \"Percentage of cars\")  |&gt;  \n  hc_xAxis(title = list(text = \"Type of drive train\"))  |&gt;  \n  hc_yAxis(title = list(text = \"Percentage of cars\"),\n           labels = list(format = \"{value}%\"))  |&gt;  \n  hc_title(text = list(\"Drive Train Distribution\"))  |&gt;  \n  hc_exporting(enabled = TRUE)  |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\n\n\nScatter Charts\nScatter plots are used to visualize relationships between two continuous variables, such as correlation or clustering patterns.\n\nScatter ChartGrouped Scatter ChartGrouped Scatter Chart with Custom Colors\n\n\n\nmpg |&gt;  \n  hchart(\"scatter\", hcaes(x = displ, y = cty),\n         color = \"orange\")  |&gt;  \n  hc_xAxis(title = list(text = \"Engine displacement, in litres\")) |&gt;   \n  hc_yAxis(title = list(text = \"City miles per gallon\")) |&gt; \n  hc_title(text = list(\"Engine Displacement (in litres) vs City Miles Per Gallon\"))  |&gt;  \n  hc_exporting(enabled = TRUE)  |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\nmpg  |&gt;  \n  hchart(\"scatter\", hcaes(x = displ, y = cty, group = drv))  |&gt;  \n  hc_xAxis(title = list(text = \"Engine displacement, in litres\")) |&gt;   \n  hc_yAxis(title = list(text = \"City miles per gallon\")) |&gt; \n  hc_title(text = list(\"Engine Displacement (in litres) vs City Miles Per Gallon\n                       According to the Type of Drive Train\")) |&gt;  \n  hc_legend(title = list(text = \"Type of Drive Train\")) |&gt;\n  hc_exporting(enabled = TRUE)  |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\nmpg  |&gt;  \n  hchart(\"scatter\", hcaes(x = displ, y = cty, group = drv))  |&gt;  \n  hc_xAxis(title = list(text = \"Engine displacement, in litres\")) |&gt;   \n  hc_yAxis(title = list(text = \"City miles per gallon\")) |&gt; \n  hc_title(text = list(\"Engine Displacement (in litres) vs City Miles Per Gallon\n                       According to the Type of Drive Train\")) |&gt; \n  hc_legend(title = list(text = \"Type of Drive Train\")) |&gt; \n  hc_exporting(enabled = TRUE)  |&gt; \n  hc_colors(c(\"#dc3545\", \"#5c6f7e\", \"orange\", \"#005383\", \"#0087bb\"))  |&gt;  \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\n\n\nLine Charts\nLine charts are commonly used to display trends over time or to track changes in data continuously.\n\nLine ChartGroup Line ChartStock Line Chart\n\n\n\nglobaltemp   |&gt;  \n  mutate(year = year(date)) |&gt; \n  group_by(year) |&gt; \n  summarise(average_minimum_tempature = round(mean(lower),2)) |&gt; \n  hchart(\"line\", hcaes(x = year, y = average_minimum_tempature),\n         color = \"#005383\",\n         name = \"Average Minimum Tempature\") |&gt; \n  hc_xAxis(title = list(text = \"Year\")) |&gt;  \n  hc_yAxis(title = list(text = \"Average Minimum Temperature\")) |&gt;  \n  hc_title(text = list(\"Average Global Minimum Temperature over the Years\")) |&gt;  \n  hc_exporting(enabled = TRUE) |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\nvaccines |&gt; \n  filter(state %in% c(\"Florida\", \"California\")) |&gt; \n  mutate(count = ifelse(is.na(count), 0, count)) |&gt; \n  hchart(\"line\", hcaes(x = year, y = count, group = state)) |&gt; \n  hc_xAxis(title = list(text = \"Year\")) |&gt;  \n  hc_yAxis(title = list(text = \"Number of cases per 100k people\")) |&gt;  \n  hc_title(text = list(\"Measles Infected Cases per 100k People \n                       in Florida & California\")) |&gt; \n  hc_colors(c(\"#dc3545\", \"#5c6f7e\")) |&gt; \n  hc_exporting(enabled = TRUE) |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\nCreate an extensible time-series object\n\nglobaltemp_xts &lt;- xts(x = globaltemp$lower,\n                      order.by = globaltemp$date)\n\n\nhighchart(type = \"stock\") |&gt; \n  hc_add_series(globaltemp_xts,\n                type = \"line\",\n                color = \"#005383\",\n                name = \"Minimum Temperature\") |&gt; \n  hc_xAxis(title = list(text = \"Date\")) |&gt;  \n  hc_yAxis(title = list(text = \"Global Minimum Temperature\"),\n           opposite = FALSE) |&gt;  \n  hc_title(text = list(\"Global Minimum Temperature over the Years\")) |&gt;  \n  hc_exporting(enabled = TRUE) |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThank you for following along\n\n\n\nYour friendly neighborhood data scientist"
  },
  {
    "objectID": "posts/interactive-data-visualisation-with-highcharter-in-r/index.html#scatter-charts",
    "href": "posts/interactive-data-visualisation-with-highcharter-in-r/index.html#scatter-charts",
    "title": "Interactive Data Visualisation with Highcharter in R",
    "section": "Scatter Charts",
    "text": "Scatter Charts"
  },
  {
    "objectID": "posts/2024-02-12-color-palettes-generation-for-data-visualisation/index.html",
    "href": "posts/2024-02-12-color-palettes-generation-for-data-visualisation/index.html",
    "title": "Color Palette Generation and Previewing for Charts and Dashboards",
    "section": "",
    "text": "Note\n\n\n\nI recommend reading this post in dark mode if the example images are too intense for your eyes in light mode. To switch modes, click the toggle button in the top right corner, located to the left of the search icon.\n\n\n\nDefinitions\n\nColor Palette: A predefined set of colors used to represent different data categories or values in charts, graphs, or other visualizations.\nHex color: A color expressed as a six-digit combination of numbers and letters defined by its mix of red, green and blue (RGB).\n\nThe reminder of this post goes through the resources I use for color palette generation and viewing for charts and dashboards.\n\n\nGoogle Color Picker\nWhen selecting colors for data visualization, websites, or dashboard themes, I often rely on the Google Color Picker tool. It’s an excellent resource that allows you to choose colors tailored to your specific use-case. Since the colors are a mix of RGB (Red, Green, Blue), there are a staggering 16,777,216 possible combinations available. This is because each RGB parameter can have a value between 0 and 255, resulting in a total of 256 x 256 x 256 possible colors.\nTo access the Google Color Picker, simply open Chrome and search for “color picker”.\n\n\n\nData Color Picker\nData color picker is a versatile tool designed to assist in generating color palettes, single hue scales, and divergent color scales. Additionally, it provides visual previews of these color schemes in context, along with guidance on their application for data visualization.\nThe images below show the different color generation options and how they look in context.\n\n\n\n\n\n\nPalette Generator\n\n\n\n\n\n\n\nPalette Generator in Context\n\n\n\n\n\n\n\n\n\nSingle Hue Scale\n\n\n\n\n\n\n\nSingle Hue scale in Context\n\n\n\n\n\n\n\n\n\nDivergent Color Scale\n\n\n\n\n\n\n\nDivergent Color Scale in Context\n\n\n\n\n\n\n\n\nCoolors\nCoolors is a color palette generator and platform where you can explore popular and trending color schemes. It provides inspiration for creating your own palettes through a range of customization options. With Coolors, you can easily discover, experiment, and craft unique color combinations to suit your design needs.\n\n\n\n\nDashboard Color Checker\nThe dashboard color checker serves as a great tool for previewing how a dashboard will look with different color palettes. It provides the option to copy the URL of the color palettes generated in Coolors.\n\n\n\nMuted Colors\nI often choose muted colors for many of my data visualisation tasks. Muted colors, also known as desaturated or subdued colors, are softened by adding gray or complementary hues to reduce their brightness intensity.\nThese are the reasons why I choose muted colors:\n\nReducing Noise: Muted colors minimize distractions, focusing attention on the data.\nEnhancing Readability: Muted colors ease strain and improve comprehension.\nConveying Professionalism: Muted colors offer a mature, serious look suitable for formal contexts.\n\n\n\nLink to All Resources\n\nGoogle Color Picker\nData Color Picker\nCoolors\nDashboard Color Checker\n\n\n\n\n\n\n\nThank you for following along\n\n\n\nYour friendly neighborhood data scientist"
  },
  {
    "objectID": "posts/2024-02-16-interactive-data-visualisation-with-highcharter-in-r/index.html",
    "href": "posts/2024-02-16-interactive-data-visualisation-with-highcharter-in-r/index.html",
    "title": "Interactive Data Visualisation with Highcharter in R",
    "section": "",
    "text": "Data visualization is a powerful tool that enables us to communicate complex information effectively and intuitively. In today’s data-driven world, where vast amounts of information are generated daily, the ability to create meaningful visual representations of data is essential for analysis, exploration, and decision-making. Among the plethora of tools available for data visualization, Highcharter stands out as a versatile and user-friendly option for creating interactive visualizations within the R programming environment.\nIn this blog post, we’ll explore how Highcharter can be leveraged to create interactive and engaging visualizations in R.\n\nInstall and load Packages\nBefore moving any further with this post, you will need to install and load three libraries: tidyverse, highcharter, and xts.\n\nTidyverse - is a collection of R packages designed for data science and statistical analysis. It provides a coherent and consistent framework for working with data by promoting a tidy data structure and emphasizing a grammar of data manipulation. The tidyverse includes packages such as dplyr for data manipulation, ggplot2 for data visualization, tidyr for data tidying, readr for data import, and several others.\nHighcharter - The highcharter package provides an interface to the Highcharts JavaScript library, allowing R users to create a wide variety of charts, including line charts, bar charts, scatter plots, heatmaps, and more, with interactive features such as zooming, tooltips, and drill-down capabilities.\nXts - eXtensible Time Series is an R package designed for handling time series data. It provides an extensible framework for creating, manipulating, and analyzing time series objects in R.\n\nInstall CRAN version:\ninstall.packages(\"tidyverse\")\ninstall.packages(\"highcharter\")\ninstall.packages(\"xts\")\nLoad packages:\n\nlibrary(tidyverse) \nlibrary(highcharter)\nlibrary(xts)\n\n\n\nDatasets\nThe R package datasets will be used to create bar, pie, scatter, and line charts using highcharter.\n\nmpgglobaltempvaccines\n\n\nmpg is a ggplot2 dataset that contains a subset of the fuel economy data that the EPA makes available on https://fueleconomy.gov/. It contains only models which had a new release every year between 1999 and 2008 - this was used as a proxy for the popularity of the car.\n\n\n\n\n\n\nExpand To Learn More About the mpg Dataset\n\n\n\n\n\nFormat - A data frame with 234 rows and 11 variables:\n\nmanufacturer - manufacturer name\nmodel - model name\ndispl - engine displacement, in litres\nyear - year of manufacture\ncyl - number of cylinders\ntrans - type of transmission\ndrv - the type of drive train, where f = front-wheel drive, r = rear wheel drive, 4 = 4wd\ncty - city miles per gallon\nhwy - highway miles per gallon\nfl - fuel type\nclass - “type” of car\n\nView mpg dataset\n\nmpg\n\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# ℹ 224 more rows\n\n\n\n\n\n\n\nglobaltemp is a highcharter dataset that contains temperature information by years, sourced by the climate lab book.\n\n\n\n\n\n\nExpand To Learn More About the globaltemp Dataset\n\n\n\n\n\nFormat - A data frame with 1992 observations and 4 variables.\n\ndate- date\nlower - minimum temperature\nmedian - median temperature\nupper - maximum temperature\n\nView globaltemp dataset\n\nglobaltemp\n\n# A tibble: 1,992 × 4\n   date       median  lower  upper\n   &lt;date&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 1850-01-01 -0.702 -1.10  -0.299\n 2 1850-02-01 -0.284 -0.675  0.114\n 3 1850-03-01 -0.732 -1.08  -0.383\n 4 1850-04-01 -0.57  -0.903 -0.237\n 5 1850-05-01 -0.325 -0.662  0.006\n 6 1850-06-01 -0.213 -0.515  0.084\n 7 1850-07-01 -0.128 -0.458  0.199\n 8 1850-08-01 -0.233 -0.596  0.132\n 9 1850-09-01 -0.444 -0.818 -0.071\n10 1850-10-01 -0.452 -0.794 -0.105\n# ℹ 1,982 more rows\n\n\n\n\n\n\n\nvaccines is a highcharter dataset that contains the number of infected people by Measles, measured over 70-some years and across all 50 states. From the WSJ analysis: http://graphics.wsj.com/infectious-diseases-and-vaccines/\n\n\n\n\n\n\nExpand To Learn More About the vaccines Dataset\n\n\n\n\n\nFormat - A data frame with 3,876 observations and 3 variables.\n\nyear- year\nstate - name of the state\ncount - number of cases per 100,000 people. If the value is NA the count was 0\n\nView vaccines dataset\n\nvaccines\n\n# A tibble: 3,876 × 3\n    year state                count\n   &lt;int&gt; &lt;chr&gt;                &lt;dbl&gt;\n 1  1928 Alabama              335. \n 2  1928 Alaska                NA  \n 3  1928 Arizona              201. \n 4  1928 Arkansas             482. \n 5  1928 California            69.2\n 6  1928 Colorado             207. \n 7  1928 Connecticut          635. \n 8  1928 Delaware             256. \n 9  1928 District Of Columbia 536. \n10  1928 Florida              120. \n# ℹ 3,866 more rows\n\n\n\n\n\n\n\n\n\n\nHighcharter Functions\n\n\n\n\n\n\nExpand To Learn More About the Highcharter Functions used in this Post\n\n\n\n\n\nhchart():\n\nThis function is used to create a highchart object directly from a data frame or other R objects.\nIt simplifies the process of creating charts by automatically inferring the chart type and mapping data variables to visual properties.\n\nhcaes():\n\nThis function specifies the aesthetics mappings for the chart.\nIt maps data variables to visual properties of the chart, such as x-axis, y-axis, color, size, etc.\n\nhc_xAxis() and hc_yAxis():\n\nThese functions configure the x-axis and y-axis of the chart, respectively.\nThey allow customization of axis titles, labels, tick marks, and other properties.\n\nhc_title():\n\nThis function sets the title of the chart.\nIt allows customization of the main title displayed above the chart.\n\nhc_exporting():\n\nhis function enables exporting functionality for the chart.\nIt allows users to download the chart as a png, jpeg, pdf, svg, vector, csv, and xls etc.\n\nhc_add_theme():\n\nThis function applies a theme to the chart.\nIt allows customization of chart appearance, such as colors, fonts, and backgrounds.\n\nhc_legend():\n\nThis function configures the appearance and position of the chart legend.\nIt allows customization of legend title, labels, alignment, and other properties.\n\nhc_colors():\n\nThis function sets a custom color palette for the chart.\nIt allows specifying a vector of colors to be used for different data series, points, or other visual elements.\n\n\n\n\n\n\nHighcharter Parameters\n\n\n\n\n\n\nExpand To Learn More About the Highcharter Parameters used in this Post\n\n\n\n\n\ntype:\n\nThis parameter specifies the type of chart to be created, such as “line”, “bar”, “scatter”, etc.\n\ncolor:\n\nThis parameter sets the color of data series, points, or other visual elements in the chart.\n\ndataLabels:\n\nThis parameter controls the display of data labels on the chart.\nIt allows customization of the format, position, and appearance of data labels.\n\nname:\n\nThis parameter sets the name or label of a data series in the chart legend.\n\nenabled:\n\nThis parameter specifies whether a particular feature, such as data labels or exporting functionality, is enabled or disabled.\n\nformat:\n\nThis parameter specifies the format of data labels or other text elements in the chart.\n\nshowInLegend:\n\nThis parameter specifies whether a data series or point should be displayed in the chart legend.\nIt can be set to TRUE or FALSE to control visibility in the legend.\n\nbackgroundColor:\n\nThis parameter sets the background color of the chart or specific chart elements.\nIt accepts color values in various formats, such as hexadecimal codes or named colors.\n\ntext:\n\nThis parameter sets the text content for various chart elements, such as titles, labels, or tooltips.\nIt allows customization of text appearance, formatting, and positioning.\n\ngroup:\n\nThis parameter is used in conjunction with hcaes() to group data points for various purposes, such as creating facets or subsets within the chart.\nIt allows grouping data points based on a categorical variable, which can be useful for creating multiple series, facets, or subsets within the chart.\n\n\n\n\n\n\nBar Charts\nBar charts are used to compare categorical data or to track changes over time.\n\nBar ChartColumn ChartGrouped Column ChartStacked Column Chart\n\n\n\nmpg |&gt;  \n  group_by(class) |&gt;  \n  summarise(number_of_cars = n()) |&gt; \n  arrange(desc(number_of_cars)) |&gt;  \n  hchart(\"bar\", hcaes(x = class, y = number_of_cars),\n         color = \"#5c6f7e\",\n         dataLabels = list(enabled = TRUE, format = \"{y}\"),\n         name = \"Number of cars\") |&gt; \n  hc_xAxis(title = list(text = \"Car type\")) |&gt;  \n  hc_yAxis(title = list(text = \"Number of cars\"),\n           labels = list(format = \"{value}\")) |&gt; \n  hc_title(text = list(\"Distribution of Car Types\")) |&gt;  \n  hc_exporting(enabled = TRUE) |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\nmpg |&gt;  \n  group_by(class) |&gt; \n  summarise(number_of_cars = n()) |&gt; \n  arrange(desc(number_of_cars)) |&gt; \n  hchart(\"column\", hcaes(x = class, y = number_of_cars),\n         color = \"#5c6f7e\",\n         dataLabels = list(enabled = TRUE, format = \"{y}\"),\n         name = \"Number of cars\") |&gt; \n  hc_xAxis(title = list(text = \"Car type\")) |&gt;  \n  hc_yAxis(title = list(text = \"Number of cars\"),\n           labels = list(format = \"{value}\")) |&gt;  \n  hc_title(text = list(\"Distribution of Car Types\")) |&gt;  \n  hc_exporting(enabled = TRUE) |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\nmpg |&gt;  \n  group_by(class, drv)  |&gt;  \n  summarise(number_of_cars = n())  |&gt;  \n  arrange(desc(number_of_cars))  |&gt;  \n  hchart(\"column\", hcaes(x = class, y = number_of_cars, group= drv),\n         dataLabels = list(enabled = TRUE, format = \"{y}\"))  |&gt;  \n  hc_xAxis(title = list(text = \"Car type\"))  |&gt;  \n  hc_yAxis(title = list(text = \"Number of Cars\"),\n           labels = list(format = \"{value}\"))  |&gt;  \n  hc_title(text = list(\"Distribution of Car Types by Drive Train\"))  |&gt;  \n  hc_legend(title = list(text = \"Type of Drive Train\")) |&gt;\n  hc_exporting(enabled = TRUE)  |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\nmpg  |&gt;  \n  group_by(class, drv)  |&gt;  \n  summarise(number_of_cars = n()) |&gt;  \n  arrange(desc(number_of_cars))  |&gt;  \n  hchart(\"column\", hcaes(x = class, y = number_of_cars, group= drv),\n         dataLabels = list(enabled = TRUE, format = \"{y}\"),\n         stacking = \"normal\")  |&gt;  \n  hc_colors(c(\"#005383\", \"#5c6f7e\", \"#dc3545\")) |&gt;  \n  hc_xAxis(title = list(text = \"Type of car\"))  |&gt;  \n  hc_yAxis(title = list(text = \"Number of cars\"),\n           labels = list(format = \"{value}\"))  |&gt;  \n  hc_title(text = list(\"Distribution of Car Types by Drive Train\"))  |&gt; \n  hc_legend(title = list(text = \"Type of Drive Train\")) |&gt;\n  hc_exporting(enabled = TRUE)  |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\n\n\nPie Charts\nPie charts are effective for showing the composition or distribution of categorical data, such as market shares or proportions of a whole.\n\nPie ChartPie Chart With % labelColumn Chart AlternativeColumn Chart Alternative with Different Colors\n\n\n\nmpg |&gt;  \n  group_by(drv)  |&gt;  \n  summarise(number_of_cars = n())  |&gt;  \n  arrange(desc(number_of_cars)) |&gt;  \n  hchart(\"pie\", hcaes(x = drv, y = number_of_cars),\n         dataLabels = list(format = \"&lt;b&gt;{point.name}&lt;/b&gt;:&lt;br&gt;{point.number_of_cars}\"),\n         name = \"Number of cars\",\n         showInLegend = TRUE)  |&gt;  \n  hc_colors(c(\"#dc3545\", \"#5c6f7e\", \"orange\"))  |&gt;  \n  hc_title(text = list(\"Drive Train Distribution\"))  |&gt;\n  hc_legend(title = list(text = \"Type of Drive Train\")) |&gt;\n  hc_exporting(enabled = FALSE)  |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\nmpg  |&gt;  \n  group_by(drv) |&gt;  \n  summarise(number_of_cars = n())  |&gt;  \n  mutate(percentage_of_cars = round(number_of_cars/sum(number_of_cars)*100,1))  |&gt; \n  arrange(desc(percentage_of_cars)) |&gt;  \n  hchart(\"pie\", hcaes(x = drv, y = percentage_of_cars),\n         dataLabels = list(format = \"&lt;b&gt;{point.name}&lt;/b&gt;:&lt;br&gt;\n                           {point.percentage_of_cars:.1f}%\"),\n         name = \"Percentage of cars\",\n         showInLegend = TRUE)  |&gt;  \n  hc_colors(c(\"#dc3545\", \"#5c6f7e\", \"orange\")) |&gt;  \n  hc_title(text = list(\"Drive Train Distribution\"))  |&gt; \n  hc_legend(title = list(text = \"Type of Drive Train\")) |&gt;\n  hc_exporting(enabled = FALSE)  |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\nmpg  |&gt;  \n  group_by(drv) |&gt;  \n  summarise(number_of_cars = n())  |&gt;  \n  mutate(percentage_of_cars = round(number_of_cars/sum(number_of_cars)*100,1))  |&gt; \n  arrange(desc(percentage_of_cars)) |&gt;   \n  hchart(\"column\", hcaes(x = drv, y = percentage_of_cars),\n         color = \"#5c6f7e\",\n         dataLabels = list(enabled = TRUE, format = \"{y}%\"),\n         name = \"Percentage of cars\")  |&gt;  \n  hc_xAxis(title = list(text = \"Type of drive train\"))  |&gt;  \n  hc_yAxis(title = list(text = \"Percentage of cars\"),\n           labels = list(format = \"{value}%\"))  |&gt;  \n  hc_title(text = list(\"Drive Train Distribution\"))  |&gt;  \n  hc_exporting(enabled = TRUE)  |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\nmpg  |&gt;  \n  group_by(drv) |&gt;  \n  summarise(number_of_cars = n())  |&gt;  \n  mutate(percentage_of_cars = round(number_of_cars/sum(number_of_cars)*100,1))  |&gt; \n  arrange(desc(percentage_of_cars)) |&gt;   \n  hchart(\"column\", hcaes(x = drv, y = percentage_of_cars, \n                         color = c(\"#dc3545\", \"#5c6f7e\", \"#005383\")),\n         dataLabels = list(enabled = TRUE, format = \"{y}%\"),\n         name = \"Percentage of cars\")  |&gt;  \n  hc_xAxis(title = list(text = \"Type of drive train\"))  |&gt;  \n  hc_yAxis(title = list(text = \"Percentage of cars\"),\n           labels = list(format = \"{value}%\"))  |&gt;  \n  hc_title(text = list(\"Drive Train Distribution\"))  |&gt;  \n  hc_exporting(enabled = TRUE)  |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\n\n\nScatter Charts\nScatter plots are used to visualize relationships between two continuous variables, such as correlation or clustering patterns.\n\nScatter ChartGrouped Scatter ChartGrouped Scatter Chart with Custom Colors\n\n\n\nmpg |&gt;  \n  hchart(\"scatter\", hcaes(x = displ, y = cty),\n         color = \"orange\")  |&gt;  \n  hc_xAxis(title = list(text = \"Engine displacement, in litres\")) |&gt;   \n  hc_yAxis(title = list(text = \"City miles per gallon\")) |&gt; \n  hc_title(text = list(\"Engine Displacement (in litres) vs City Miles Per Gallon\"))  |&gt;  \n  hc_exporting(enabled = TRUE)  |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\nmpg  |&gt;  \n  hchart(\"scatter\", hcaes(x = displ, y = cty, group = drv))  |&gt;  \n  hc_xAxis(title = list(text = \"Engine displacement, in litres\")) |&gt;   \n  hc_yAxis(title = list(text = \"City miles per gallon\")) |&gt; \n  hc_title(text = list(\"Engine Displacement (in litres) vs City Miles Per Gallon\n                       According to the Type of Drive Train\")) |&gt;  \n  hc_legend(title = list(text = \"Type of Drive Train\")) |&gt;\n  hc_exporting(enabled = TRUE)  |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\nmpg  |&gt;  \n  hchart(\"scatter\", hcaes(x = displ, y = cty, group = drv))  |&gt;  \n  hc_xAxis(title = list(text = \"Engine displacement, in litres\")) |&gt;   \n  hc_yAxis(title = list(text = \"City miles per gallon\")) |&gt; \n  hc_title(text = list(\"Engine Displacement (in litres) vs City Miles Per Gallon\n                       According to the Type of Drive Train\")) |&gt; \n  hc_legend(title = list(text = \"Type of Drive Train\")) |&gt; \n  hc_exporting(enabled = TRUE)  |&gt; \n  hc_colors(c(\"#dc3545\", \"#5c6f7e\", \"orange\"))  |&gt;  \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\n\n\nLine Charts\nLine charts are commonly used to display trends over time or to track changes in data continuously.\n\nLine ChartGroup Line ChartStock Line Chart\n\n\n\nglobaltemp   |&gt;  \n  mutate(year = year(date)) |&gt; \n  group_by(year) |&gt; \n  summarise(average_minimum_tempature = round(mean(lower),2)) |&gt; \n  hchart(\"line\", hcaes(x = year, y = average_minimum_tempature),\n         color = \"#005383\",\n         name = \"Average Minimum Tempature\") |&gt; \n  hc_xAxis(title = list(text = \"Year\")) |&gt;  \n  hc_yAxis(title = list(text = \"Average Minimum Temperature\")) |&gt;  \n  hc_title(text = list(\"Average Global Minimum Temperature over the Years\")) |&gt;  \n  hc_exporting(enabled = TRUE) |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\nvaccines |&gt; \n  filter(state %in% c(\"Florida\", \"California\")) |&gt; \n  mutate(count = ifelse(is.na(count), 0, count)) |&gt; \n  hchart(\"line\", hcaes(x = year, y = count, group = state)) |&gt; \n  hc_xAxis(title = list(text = \"Year\")) |&gt;  \n  hc_yAxis(title = list(text = \"Number of cases per 100k people\")) |&gt;  \n  hc_title(text = list(\"Measles Infected Cases per 100k People \n                       in Florida & California\")) |&gt; \n  hc_colors(c(\"#dc3545\", \"#5c6f7e\")) |&gt; \n  hc_exporting(enabled = TRUE) |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\nCreate an extensible time-series object\n\nglobaltemp_xts &lt;- xts(x = globaltemp$lower,\n                      order.by = globaltemp$date)\n\n\nhighchart(type = \"stock\") |&gt; \n  hc_add_series(globaltemp_xts,\n                type = \"line\",\n                color = \"#005383\",\n                name = \"Minimum Temperature\") |&gt; \n  hc_xAxis(title = list(text = \"Date\")) |&gt;  \n  hc_yAxis(title = list(text = \"Global Minimum Temperature\"),\n           opposite = FALSE) |&gt;  \n  hc_title(text = list(\"Global Minimum Temperature over the Years\")) |&gt;  \n  hc_exporting(enabled = TRUE) |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThank you for following along\n\n\n\nYour friendly neighborhood data scientist"
  },
  {
    "objectID": "posts/2024-02-17-using-highcharter-in-an-interactive-and-static-quarto-report/index.html",
    "href": "posts/2024-02-17-using-highcharter-in-an-interactive-and-static-quarto-report/index.html",
    "title": "Using Highcharter in an Interactive and Static Quarto Report",
    "section": "",
    "text": "Generating reports with Highcharter charts in R can pose challenges when the output format needs to be in .pdf or .docx. However, there’s a straightforward workaround available. You can download the chart and then paste it into either a PowerPoint or Word document. If needed, you can convert the document to a .pdf format afterward.\nTo enable downloading options, you can use the hc_exporting(...) function:\nhighcharter_chart_object |&gt; \n  hc_exporting(enabled = TRUE)\nThe highcharter_chart_object represents a highcharter chart.\nDownload options provided by enabling exporting:\n\nIn this post, we will explore another workaround using the webshot2 and htmlwidgets packages. This method enables you to work exclusively within R without the need to download or take screenshots of charts for pasting into other documents.\n\n\n\n\n\n\nNote\n\n\n\nTo learn more about the YAML Quarto code chunk options used in this post, you can refer to the Quarto Chuck Options section in the R for Data Science (2e) online book.\n\n\n\n0.1 Package Use-case and Installation\nTidyverse will be used for data manipulation\ninstall.packages(\"tidyverse\")\nHighcharter will be used to create an interactive chart\ninstall.packages(\"highcharter\")\nHtmlwidgets will used to save the interactive chart to an .html file\ninstall.packages(\"htmlwidgets\")\nWebshot2 will be used to take a screenshot of the saved interactive chart (.html file). The screenshot can be saved as an .png, .jpeg, or .pdf.\ninstall.packages(\"webshot2\")\n\n\n0.2 Dataset\nThe line chart generated using Highcharter, showcased in the reports within the subsequent sections, provides insights derived from the vaccines dataset.\n\n\n\n\n\n\nExpand To Learn More About the vaccines Dataset\n\n\n\n\n\nvaccines is a highcharter dataset that contains the number of infected people by Measles, measured over 70-some years and across all 50 states. From the WSJ analysis: http://graphics.wsj.com/infectious-diseases-and-vaccines/\nFormat - A data frame with 3,876 observations and 3 variables.\n\nyear- year\nstate - name of the state\ncount - number of cases per 100,000 people. If the value is NA the count was 0\n\nView vaccines dataset\n\nlibrary(highcharter)\nvaccines\n\n# A tibble: 3,876 × 3\n    year state                count\n   &lt;int&gt; &lt;chr&gt;                &lt;dbl&gt;\n 1  1928 Alabama              335. \n 2  1928 Alaska                NA  \n 3  1928 Arizona              201. \n 4  1928 Arkansas             482. \n 5  1928 California            69.2\n 6  1928 Colorado             207. \n 7  1928 Connecticut          635. \n 8  1928 Delaware             256. \n 9  1928 District Of Columbia 536. \n10  1928 Florida              120. \n# ℹ 3,866 more rows\n\n\n\n\n\n\n\n0.3 .pdf Quarto Report\nThe following code produces a .pdf report, accomplished by setting the output format to PDF using format: pdf. The delay argument specifies the time to wait before taking a screenshot, in seconds. It is advisable to set a longer delay to ensure all assets display properly.\n\n\n\n\n\n\nNote\n\n\n\nTo generate a PDF format report, a LaTeX installation is necessary. To ensure smooth output of a .pdf report, please install TinyTeX by executing the following command in your Terminal:\n\n\nTerminal\n\nquarto install tinytex\n\n\n\n\nCodeR Studio Code Screenshot\n\n\n---\ntitle: \"Measles Infected Cases\"\nauthor: \"E-tech Blog\"\ndate: \"2024-02-17\"\nformat: pdf\nexecute:\n  echo: false\n  warning: false\n---\nlibrary(tidyverse) \nlibrary(highcharter)\nlibrary(webshot2)\nlibrary(htmlwidgets)\n\nmeasles_infected_cases &lt;- vaccines |&gt; \n  filter(state %in% c(\"Florida\", \"California\")) |&gt; \n  mutate(count = ifelse(is.na(count), 0, count)) |&gt; \n  hchart(\"line\", hcaes(x = year, y = count, group = state)) |&gt; \n  hc_xAxis(title = list(text = \"Year\")) |&gt;  \n  hc_yAxis(title = list(text = \"Number of cases per 100k people\")) |&gt;  \n  hc_title(text = list(\"Measles Infected Cases per 100k People \n                       in Florida & California\")) |&gt; \n  hc_colors(c(\"#dc3545\", \"#5c6f7e\")) |&gt; \n  hc_exporting(enabled = FALSE) |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\nsaveWidget(widget = measles_infected_cases,\n           file = \"measles_infected_cases_chart.html\")\nwebshot(url = \"measles_infected_cases_chart.html\",\n        file = \"measles_infector_cases_chart.jpeg\",\n        delay = 2)\n\n\n\n\n\n\nThe above code produces the following report:\n\n\n\n0.4 .docx Quarto Report\nThe .docx Quarto report can be produced by replacing format: pdf with format: docx in the code provided in Section 0.3.\n\n\n\n\n\n\nNote\n\n\n\nViewing Word documents necessitates the installation of MS Word (or Libre/Open Office on Linux).\n\n\nThe .docx format will produce the following report:\n\n\n\n0.5 .html Quarto Report\nThe following code produces an .html report. This is achieved by setting the output format to HTML using format: html.\n\nCodeR Studio Code Screenshot\n\n\n---\ntitle: \"Measles Infected Cases\"\nauthor: \"E-tech Blog\"\ndate: \"2024-02-17\"\nformat: html\nexecute:\n  echo: false\n  warning: false\n---\nlibrary(tidyverse) \nlibrary(highcharter)\n\nmeasles_infected_cases &lt;- vaccines |&gt; \n  filter(state %in% c(\"Florida\", \"California\")) |&gt; \n  mutate(count = ifelse(is.na(count), 0, count)) |&gt; \n  hchart(\"line\", hcaes(x = year, y = count, group = state)) |&gt; \n  hc_xAxis(title = list(text = \"Year\")) |&gt;  \n  hc_yAxis(title = list(text = \"Number of cases per 100k people\")) |&gt;  \n  hc_title(text = list(\"Measles Infected Cases per 100k People \n                       in Florida & California\")) |&gt; \n  hc_colors(c(\"#dc3545\", \"#5c6f7e\")) |&gt; \n  hc_exporting(enabled = TRUE) |&gt; \n  hc_add_theme(hc_theme(chart = list(backgroundColor = \"white\")))\n\nmeasles_infected_cases\n\n\n\n\n\n\nThe above code produces the following report:\n\n\n\n0.6 Sejda .html to PDF\nAlternatively, the Sejda HTML to PDF converter can be used to quickly convert a .html format report to a .pdf report.\n\n\n\n\n\n\n\nThank you for following along\n\n\n\nYour friendly neighborhood data scientist"
  },
  {
    "objectID": "posts/2024-02-17-using-highcharter-in-an-interactive-and-static-quarto-report/index.html#r-studio-code-screenshot",
    "href": "posts/2024-02-17-using-highcharter-in-an-interactive-and-static-quarto-report/index.html#r-studio-code-screenshot",
    "title": "Using Highcharter in an Interactive and Static Quarto Report",
    "section": "R Studio Code Screenshot",
    "text": "R Studio Code Screenshot\n\n:::"
  },
  {
    "objectID": "research/index.html",
    "href": "research/index.html",
    "title": "E-Research",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nWeb-based Clustering Application for Determining and Understanding Student Engagement Levels in Virtual Learning Environments\n\n\n\n\n\n\nEli Nimy, Moeketsi Mosia\n\n\nNov 30, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIdentifying At-Risk Students for Early Intervention—A Probabilistic Machine Learning Approach\n\n\n\n\n\n\nEli Nimy, Moeketsi Mosia, Colin Chibaya\n\n\nMar 18, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShowcasing White-Box Implementation of the RSA Digital Signature Scheme\n\n\n\n\n\n\nColin Chibaya, Mfundo Monchwe, Taryn Nicole Michael, Eli Bila Nimy\n\n\nOct 18, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "research/2023-03-18-identifying-at-risk-students/index.html",
    "href": "research/2023-03-18-identifying-at-risk-students/index.html",
    "title": "Identifying At-Risk Students for Early Intervention—A Probabilistic Machine Learning Approach",
    "section": "",
    "text": "Abstract\nThe utilization of learning analytics to identify at-risk students for early intervention has exhibited promising results. However, most predictive models utilized to address this issue have been based on non-probabilistic machine learning models. In response, this study incorporated probabilistic machine learning for two reasons: (1) to facilitate the inclusion of domain knowledge, and (2) to enable the quantification of uncertainty in model parameters and predictions. The study developed a five-stage, probabilistic logistic regression model to identify at-risk students at different stages throughout the academic calendar. Rather than predicting a student’s final or exam mark, the model was focused on predicting the at-risk probabilities for subsequent assessments—specifically, the probability of a student failing an upcoming assessment. The model incorporated student engagement data from Moodle, as well as demographic and student performance data. The study’s findings indicate that the significance and certainty of student engagement and demographic variables decreased after incorporating student-performance variables, such as assignments and tests. The most effective week for identifying at-risk students was found to be week 6, when the accuracy was 92.81%. Furthermore, the average level of uncertainty exhibited by the models decreased by 60% from stage 3 to 5, indicating more reliable predictions at later than earlier stages. The study highlights the potential of a probabilistic machine learning model to aid instructors and practitioners in identifying at-risk students, and thereby to enhance academic outcomes.\n\n\nArticle Link\nMDPI Applied Sciences Journal"
  },
  {
    "objectID": "research/2022-10-18-rsa-digital-signature/index.html",
    "href": "research/2022-10-18-rsa-digital-signature/index.html",
    "title": "Showcasing White-Box Implementation of the RSA Digital Signature Scheme",
    "section": "",
    "text": "Abstract\nData security is a priority in online transactions. Data security, in this context, refers to both data confidentiality, data integrity, and data authenticity when online transactions are completed. While a lot has been done to tighten data confidentiality, algorithms to address data integrity and data authenticity are rare. The RSA digital signature scheme dominates and is often connoted when data integrity and data authenticity problems are tabled. However, the original RSA digital signature scheme is not easy to comprehend by layman. Most component units of the RSA digital signature scheme require further clarity to facilitate reproducibility and hence productivity. This study showcases the implementation of a white-box RSA digital signature scheme. In this context, a digital signature is a computational algorithm used to ensure data confidentiality, integrity, and authenticity after online transactions. It is an algorithm that ensures that data is safe, has not been tampered with, and the claimed sender is truly the sender. We build the proposed implementation from an understanding that the RSA digital signature scheme is an asymmetric model which uses two keys. One key is used to sign data such that it can only be verified using the second key. A quantitative research approach was followed in which the effectiveness of the white-box RSA digital signature scheme was evaluated with respect to the execution time and signature verification accuracy. Execution time was assessed for different values of p, q, and data lengths. Similarly, verification accuracy was also assessed with different values of p, q, and data lengths. A tradeoff between security and execution time was noted as apparent. Low accuracy was observed when the values of p and q are small. Thus, big values of p and q are recommended for better data security.\n\n\nArticle Link\nSciencePG American Journal of Computer Science and Technology"
  },
  {
    "objectID": "research/2023-11-30-web-based-clustering-application/index.html",
    "href": "research/2023-11-30-web-based-clustering-application/index.html",
    "title": "Web-based Clustering Application for Determining and Understanding Student Engagement Levels in Virtual Learning Environments",
    "section": "",
    "text": "Abstract\nThe increasing use of virtual learning environments (VLEs) in recent years has transformed teaching and learning methods. Universities now combine VLEs with traditional classrooms to accommodate hybrid teaching and learning approaches. However, student engagement with VLEs varies, and universities lack the tools to effectively determine and analyse VLE engagement. Consequently, data-driven decision-making regarding VLE usage remains a challenge for universities. This study thus proposed a user-friendly web-based application, using a R shiny framework, to determine and understand student engagement levels in VLEs. In this study, two clustering methods, K-means and Gaussian Mixture Model (GMM) were compared, to identify the most effective method for the proposed application. The results indicated that GMM outperforms K-means by generating more accurate and comprehensive groupings of student engagement levels. One key advantage of the GMM method is its ability to capture uncertainty and provide probabilities of student membership in each level of engagement, which enhances its usefulness for decision-making. Furthermore, the GMM method achieves these outcomes efficiently, saving valuable learning time. This research holds significant implications for education by providing valuable guidance for the development of Educational Data Mining (EDM) applications. Universities can leverage these applications to gain deep insights into VLE usage and enhance their understanding of student engagement. By adopting this web-based application, educators and administrators can make informed decisions and tailor interventions to optimize student learning experiences within VLEs.\n\n\nArticle Link\nNoyam E-Journal of Humanities, Arts and Social Sciences"
  },
  {
    "objectID": "disclaimer/index.html",
    "href": "disclaimer/index.html",
    "title": "E-tech Blog",
    "section": "",
    "text": "All views expressed on this website are solely those of the author(s) and do not necessarily reflect the opinions or beliefs of any affiliated organizations, companies, or individuals unless explicitly stated otherwise."
  }
]